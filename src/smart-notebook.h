/* smart-notebook.h generated by valac 0.11.6.38-0ec3, the Vala compiler, do not modify */


#ifndef __SMART_NOTEBOOK_H__
#define __SMART_NOTEBOOK_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>

G_BEGIN_DECLS


#define SMART_TYPE_NOTEBOOK_MANAGER (smart_notebook_manager_get_type ())
#define SMART_NOTEBOOK_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SMART_TYPE_NOTEBOOK_MANAGER, SmartNotebookManager))
#define SMART_NOTEBOOK_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SMART_TYPE_NOTEBOOK_MANAGER, SmartNotebookManagerClass))
#define SMART_IS_NOTEBOOK_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SMART_TYPE_NOTEBOOK_MANAGER))
#define SMART_IS_NOTEBOOK_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SMART_TYPE_NOTEBOOK_MANAGER))
#define SMART_NOTEBOOK_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SMART_TYPE_NOTEBOOK_MANAGER, SmartNotebookManagerClass))

typedef struct _SmartNotebookManager SmartNotebookManager;
typedef struct _SmartNotebookManagerClass SmartNotebookManagerClass;
typedef struct _SmartNotebookManagerPrivate SmartNotebookManagerPrivate;

#define SMART_TYPE_NOTEBOOK (smart_notebook_get_type ())
#define SMART_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SMART_TYPE_NOTEBOOK, SmartNotebook))
#define SMART_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SMART_TYPE_NOTEBOOK, SmartNotebookClass))
#define SMART_IS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SMART_TYPE_NOTEBOOK))
#define SMART_IS_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SMART_TYPE_NOTEBOOK))
#define SMART_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SMART_TYPE_NOTEBOOK, SmartNotebookClass))

typedef struct _SmartNotebook SmartNotebook;
typedef struct _SmartNotebookClass SmartNotebookClass;

#define SMART_TYPE_NOTEBOOK_TAB (smart_notebook_tab_get_type ())
#define SMART_NOTEBOOK_TAB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SMART_TYPE_NOTEBOOK_TAB, SmartNotebookTab))
#define SMART_NOTEBOOK_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SMART_TYPE_NOTEBOOK_TAB, SmartNotebookTabClass))
#define SMART_IS_NOTEBOOK_TAB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SMART_TYPE_NOTEBOOK_TAB))
#define SMART_IS_NOTEBOOK_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SMART_TYPE_NOTEBOOK_TAB))
#define SMART_NOTEBOOK_TAB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SMART_TYPE_NOTEBOOK_TAB, SmartNotebookTabClass))

typedef struct _SmartNotebookTab SmartNotebookTab;
typedef struct _SmartNotebookTabClass SmartNotebookTabClass;
typedef struct _SmartNotebookPrivate SmartNotebookPrivate;
typedef struct _SmartNotebookTabPrivate SmartNotebookTabPrivate;

struct _SmartNotebookManager {
	GObject parent_instance;
	SmartNotebookManagerPrivate * priv;
};

struct _SmartNotebookManagerClass {
	GObjectClass parent_class;
};

struct _SmartNotebook {
	GtkNotebook parent_instance;
	SmartNotebookPrivate * priv;
};

struct _SmartNotebookClass {
	GtkNotebookClass parent_class;
};

struct _SmartNotebookTab {
	GObject parent_instance;
	SmartNotebookTabPrivate * priv;
};

struct _SmartNotebookTabClass {
	GObjectClass parent_class;
};


GType smart_notebook_manager_get_type (void) G_GNUC_CONST;
SmartNotebookManager* smart_notebook_manager_new (const gchar* name);
SmartNotebookManager* smart_notebook_manager_construct (GType object_type, const gchar* name);
GType smart_notebook_get_type (void) G_GNUC_CONST;
void smart_notebook_manager_register_notebook (SmartNotebookManager* self, SmartNotebook* smart_notebook);
void smart_notebook_manager_unregister_notebook (SmartNotebookManager* self, SmartNotebook* smart_notebook);
void smart_notebook_manager_store_notebook_tab_positions (SmartNotebookManager* self, const gchar* positions_file);
void smart_notebook_manager_load_notebook_tab_positions (SmartNotebookManager* self, const gchar* positions_file);
GPtrArray* smart_notebook_manager_get_notebooks (SmartNotebookManager* self);
GType smart_notebook_tab_get_type (void) G_GNUC_CONST;
SmartNotebookTab** smart_notebook_manager_get_all_tabs (SmartNotebookManager* self, int* result_length1);
void smart_notebook_manager_set_all_tabs (SmartNotebookManager* self, SmartNotebookTab** value, int value_length1);
const gchar* smart_notebook_manager_get_data_file (SmartNotebookManager* self);
const gchar* smart_notebook_manager_get_name (SmartNotebookManager* self);
void smart_notebook_manager_set_name (SmartNotebookManager* self, const gchar* value);
gint smart_notebook_append_tab (SmartNotebook* self, SmartNotebookTab* tab);
gint smart_notebook_insert_tab (SmartNotebook* self, SmartNotebookTab* tab, gint position);
void smart_notebook_remove_tab (SmartNotebook* self, SmartNotebookTab* tab);
void smart_notebook_load_positions (SmartNotebook* self, const gchar* positions_file);
void smart_notebook_store_positions (SmartNotebook* self, const gchar* positions_file);
SmartNotebook* smart_notebook_new (const gchar* name);
SmartNotebook* smart_notebook_construct (GType object_type, const gchar* name);
GtkButton* smart_notebook_get_new_tab_button (SmartNotebook* self);
GtkButton* smart_notebook_get_tab_selector_button (SmartNotebook* self);
GtkMenu* smart_notebook_get_tab_selector_menu (SmartNotebook* self);
GPtrArray* smart_notebook_get_tabs (SmartNotebook* self);
gboolean smart_notebook_get_has_new_tab_button (SmartNotebook* self);
void smart_notebook_set_has_new_tab_button (SmartNotebook* self, gboolean value);
gboolean smart_notebook_get_has_tab_selector_button (SmartNotebook* self);
void smart_notebook_set_has_tab_selector_button (SmartNotebook* self, gboolean value);
SmartNotebookTab* smart_notebook_tab_new (GtkWidget* child, GtkWidget* label);
SmartNotebookTab* smart_notebook_tab_construct (GType object_type, GtkWidget* child, GtkWidget* label);
SmartNotebookTab* smart_notebook_tab_new_full (GtkWidget* child, GtkWidget* label, GtkImage* icon, gboolean can_close, GtkWidget* menu_label);
SmartNotebookTab* smart_notebook_tab_construct_full (GType object_type, GtkWidget* child, GtkWidget* label, GtkImage* icon, gboolean can_close, GtkWidget* menu_label);
void smart_notebook_tab_create_close_button (SmartNotebookTab* self);
void smart_notebook_tab_hide (SmartNotebookTab* self);
void smart_notebook_tab_show (SmartNotebookTab* self);
gboolean smart_notebook_tab_get_can_close (SmartNotebookTab* self);
void smart_notebook_tab_set_can_close (SmartNotebookTab* self, gboolean value);
GtkImage* smart_notebook_tab_get_icon (SmartNotebookTab* self);
GtkButton* smart_notebook_tab_get_close_button (SmartNotebookTab* self);
GtkWidget* smart_notebook_tab_get_label (SmartNotebookTab* self);
GtkWidget* smart_notebook_tab_get_child (SmartNotebookTab* self);
GtkWidget* smart_notebook_tab_get_menu_label (SmartNotebookTab* self);
void smart_notebook_tab_set_menu_label (SmartNotebookTab* self, GtkWidget* value);
gboolean smart_notebook_tab_get_visible (SmartNotebookTab* self);
void smart_notebook_tab_set_visible (SmartNotebookTab* self, gboolean value);
const gchar* smart_notebook_tab_get_name (SmartNotebookTab* self);
void smart_notebook_tab_set_name (SmartNotebookTab* self, const gchar* value);
gboolean smart_notebook_tab_get_reorderable (SmartNotebookTab* self);
void smart_notebook_tab_set_reorderable (SmartNotebookTab* self, gboolean value);
gboolean smart_notebook_tab_get_detachable (SmartNotebookTab* self);
void smart_notebook_tab_set_detachable (SmartNotebookTab* self, gboolean value);


G_END_DECLS

#endif
